#!/bin/sh

id=`id | cut -f1 -d'('`
if [ $id != "uid=0" ]
then
	echo
	echo "You must be root to run this script"
	echo
	exit
fi

# if no cert.pem, create fake CA
if [ ! -f cert.pem ]; then
	openssl req -x509 -nodes -days 365 -subj "/CN=fakeca.iudx.org.in/emailAddress=ca@iudx.org.in" -newkey rsa:2048 -keyout key.pem -out cert.pem
fi

if [ "$1" = "test" ]
then
	# use cert.pem, key.pem to create fake certificates for testing
	./test/setup.sh

	# make auth.iudx.org.in and cons.iudx.org.in point to 127.0.0.1
	./test/set-local.sh

	# create fake HTTPS certificate for Auth and Consent endpoints
	touch https-key.pem
	chmod 400 https-key.pem
	openssl req -x509 -nodes -days 365 -subj "/CN=auth.iudx.org.in" -newkey rsa:2048 -keyout https-key.pem -out https-certificate.pem
fi

useradd -s /sbin/nologin -d /nonexistent _aaa

rm -rf passwords
mkdir passwords

touch passwords/auth.db.password

#------- Passwords for various operations -----------

touch passwords/update_crl.db.password

#----------------------------------------------------

chmod 400 passwords/*

for f in `ls passwords`
do
	head /dev/urandom | sha256sum | awk '{ print $1 }' > passwords/$f 

	password=`cat passwords/$f`
	label=`echo $f | cut -f1 -d'.'`

	sed -i "s/XXX_$label/$password/" schema.sql 
done

# move admin file
mv admins.json passwords/

# move cert.pem, key.pem to passwords/ for CSR signing
mv cert.pem key.pem passwords/

echo your-telegram-api-key		> telegram.apikey
echo your-telegram-chat-id		> telegram.chatid

chmod 400 telegram.*
chmod 400 *.sql

apt update
apt upgrade -y

# if POSTGRES_IP is not set, then install locally
if [ -z "$POSTGRES_IP" ]
then
    # setup postgresql
    POSTGRES_IP=127.0.0.1
    apt install -y postgresql postgresql-contrib
    apt install -y libpq-dev

    # TODO : change 12
    until pg_isready
    do
        pg_ctlcluster 12 main start
        sleep 1
    done
    sudo -u postgres psql < schema.sql
    sudo -u postgres psql < consent_schema.sql
else
    apt install -y libpq-dev
    apt install -y postgresql-client
    psql -h $POSTGRES_IP -U postgres < schema.sql
    psql -h $POSTGRES_IP -U postgres < consent_schema.sql
fi

apt install -y nodejs npm nginx

# nginx config
#
# nginx allows for only one ssl_client_certificate parameter
# so the system ca-certificates.crt (to allow lets encrypt certs)
# must be concatenated with the other .crt files

# We also add the `cert.pem` file to allow any certificates signed by it
# to be accepted by NGINX

# TODO: Other way to do it would be to move the .crt files to /etc/ssl/certs
# directory, then run 'update-ca-certificates'. nginx will use the
# /etc/certs/ca-certificates.crt file directly

mkdir /etc/nginx/certs
cat /etc/ssl/certs/ca-certificates.crt ca.iudx.org.in.crt passwords/cert.pem CCAIndia2014.cer CCAIndia2015.cer > ca-certs.crt
cp ca-certs.crt /etc/nginx/certs/

# source the env file
. ./certbot.env

cp nginx.conf /etc/nginx/sites-available/$AUTH_DOMAIN
sed -i "s/AUTH_DOMAIN/$AUTH_DOMAIN/" /etc/nginx/sites-available/$AUTH_DOMAIN
ln -s /etc/nginx/sites-available/$AUTH_DOMAIN /etc/nginx/sites-enabled/

cp consent-nginx.conf /etc/nginx/sites-available/$CONSENT_DOMAIN
sed -i "s/CONSENT_DOMAIN/$CONSENT_DOMAIN/" /etc/nginx/sites-available/$CONSENT_DOMAIN
ln -s /etc/nginx/sites-available/$CONSENT_DOMAIN /etc/nginx/sites-enabled/

if [ "$1" != "test" ]
then
	apt install -y certbot python3-certbot-nginx
	certbot --nginx --non-interactive --agree-tos -m $EMAIL -d $AUTH_DOMAIN
	certbot --nginx --non-interactive --agree-tos -m $EMAIL -d $CONSENT_DOMAIN
fi

systemctl restart nginx

i=`systemctl is-active nginx`

if [ $i != "active" ]
then
	echo
	echo "nginx not running!!"
	echo
	exit
fi

git clone --depth=1 https://github.com/rbccps-iisc/node-aperture
cd node-aperture
npm install
npm audit fix --force

cd ..
npm install
npm audit fix --force

	until pg_isready -h $POSTGRES_IP
	do
		sleep 1
	done

cp auth-server.service /etc/systemd/system
systemctl daemon-reload
systemctl enable auth-server.service
systemctl start auth-server.service

i=`systemctl is-active auth-server`

if [ $i != "active" ]
then
	echo
	echo "Auth server not running!!"
	echo
	exit
fi
